generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
  seed            = "./prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id             String           @id
  email          String?          @unique
  username       String           @unique
  phone          String?          @unique
  name           String
  surname        String
  address        String
  img            String?
  sex            UserSex
  birthday       DateTime
  createdAt      DateTime         @default(now())
  ExamResults    ExamResult[]
  StudentCourses StudentCourses[]
  studentLessons StudentLessons[]
  Courses        Courses[]        @relation("CoursesToStudent")
}

model Teacher {
  id        String    @id
  email     String?   @unique
  username  String    @unique
  phone     String?   @unique
  name      String
  surname   String
  address   String
  img       String?
  sex       UserSex
  birthday  DateTime
  createdAt DateTime  @default(now())
  Courses   Courses[]
}

model Courses {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  previewImage   String?
  previewVideo   String?
  courseUrl      String?
  supervisorId   String?
  startTime      DateTime
  endTime        DateTime
  createdAt      DateTime         @default(now())
  supervisor     Teacher?         @relation(fields: [supervisorId], references: [id])
  Exams          Exam[]
  StudentCourses StudentCourses[]
  lessons        Lessons[]        @relation("CoursesToLessons")
  students       Student[]        @relation("CoursesToStudent")
}

model Lessons {
  id             String           @id
  name           String
  description    String
  previewImage   String
  videoUrl       String
  pdfUrl         String?
  day            Day
  startTime      DateTime
  endTime        DateTime
  Exams          Exam[]
  studentLessons StudentLessons[]
  Courses        Courses[]        @relation("CoursesToLessons")
}

model StudentCourses {
  id        Int     @id @default(autoincrement())
  studentId String
  courseId  Int
  course    Courses @relation(fields: [courseId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@unique([studentId, courseId])
}

model StudentLessons {
  id               Int      @id @default(autoincrement())
  studentId        String
  lessonId         String
  lessonCompletion Boolean?
  lesson           Lessons  @relation(fields: [lessonId], references: [id])
  student          Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, lessonId])
}

model Exam {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  lessonId    String
  coursesId   Int?
  Courses     Courses?     @relation(fields: [coursesId], references: [id])
  lesson      Lessons      @relation(fields: [lessonId], references: [id])
  ExamResult  ExamResult[]
  Questions   Question[]
}

model Question {
  id       Int      @id @default(autoincrement())
  text     String
  imageUrl String?
  options  String[]
  answer   String
  examId   Int
  exam     Exam     @relation(fields: [examId], references: [id])
}

model ExamResult {
  id        Int     @id @default(autoincrement())
  studentId String
  examId    Int
  score     Float
  exam      Exam    @relation(fields: [examId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@unique([studentId, examId])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
